#include <iostream>
#include "ece420_lib.h"
#include "opencv2/ml.hpp"

int main(int argc, char** argv)
{
	std::vector<double> mel= generateMelPoints(20, 1024, 48000);
//	for(unsigned x = 0; x < mel.size(); x++)
//	{
//		std::cout<< mel[x] << " ";
//	}
//	std::cout<< "\n";
	std::vector<unsigned> bin = generateBinPoints(mel, 1024, 48000);
//	for(unsigned x = 0; x < bin.size(); x++)
//	{
//		std::cout<< bin[x] << " ";
//	}
//	std::cout<< "\n";

	std::vector<std::vector<double>> fbank = filter_bank(20, 1024, bin);
//	for(auto itr = fbank.begin(); itr != fbank.end(); itr++)
//	{
//		for(unsigned x = 0; x < itr->size(); x++){
//			std::cout<< itr->at(x) << " ";
//		}
//		std::cout<<"\n";
//	}
//	return 0;

//	std::cout<<"Shape of filter bank ("<<fbank.size()<<","<<fbank[0].size()<<")\n";

	std::vector<double> input = {-4 ,10 ,-12 ,-19 ,-18 ,-37 ,-24 ,-42 ,-42 ,-43 ,-48 ,-60 ,-73 ,-75 ,-102 ,-94 ,-114 ,-119 ,-139 ,-142 ,-154 ,-168 ,-183 ,-200 ,-201 ,-229 ,-235 ,-262 ,-256 ,-266 ,-278 ,-272 ,-304 ,-322 ,-336 ,-338 ,-350 ,-348 ,-382 ,-392 ,-376 ,-397 ,-409 ,-428 ,-437 ,-451 ,-464 ,-484 ,-495 ,-502 ,-516 ,-518 ,-535 ,-540 ,-559 ,-566 ,-572 ,-577 ,-592 ,-596 ,-592 ,-608 ,-588 ,-596 ,-597 ,-604 ,-615 ,-601 ,-589 ,-594 ,-600 ,-577 ,-580 ,-570 ,-557 ,-546 ,-540 ,-524 ,-496 ,-483 ,-442 ,-433 ,-414 ,-387 ,-376 ,-348 ,-326 ,-282 ,-272 ,-242 ,-206 ,-176 ,-168 ,-145 ,-113 ,-92 ,-73 ,-48 ,-16 ,-8 ,6 ,20 ,50 ,62 ,62 ,100 ,106 ,129 ,138 ,160 ,176 ,193 ,186 ,198 ,221 ,216 ,249 ,238 ,252 ,251 ,273 ,277 ,285 ,311 ,305 ,320 ,314 ,315 ,328 ,330 ,342 ,340 ,338 ,343 ,358 ,336 ,350 ,374 ,365 ,369 ,372 ,377 ,386 ,410 ,392 ,402 ,404 ,412 ,414 ,408 ,425 ,431 ,432 ,419 ,434 ,431 ,439 ,446 ,440 ,455 ,433 ,447 ,438 ,440 ,426 ,426 ,424 ,404 ,405 ,401 ,401 ,397 ,397 ,385 ,374 ,383 ,366 ,362 ,342 ,348 ,338 ,326 ,313 ,316 ,302 ,283 ,292 ,248 ,257 ,242 ,242 ,226 ,200 ,201 ,186 ,203 ,188 ,178 ,164 ,165 ,152 ,148 ,153 ,137 ,147 ,132 ,138 ,126 ,126 ,130 ,118 ,126 ,102 ,96 ,81 ,94 ,84 ,82 ,76 ,59 ,50 ,36 ,45 ,26 ,20 ,9 ,20 ,-14 ,-22 ,-22 ,-54 ,-44 ,-78 ,-64 ,-90 ,-100 ,-116 ,-125 ,-126 ,-164 ,-151 ,-179 ,-182 ,-194 ,-198 ,-210 ,-226 ,-240 ,-256 ,-262 ,-292 ,-286 ,-312 ,-318 ,-333 ,-345 ,-346 ,-368 ,-364 ,-398 ,-398 ,-419 ,-424 ,-438 ,-451 ,-450 ,-476 ,-472 ,-494 ,-498 ,-512 ,-512 ,-534 ,-556 ,-558 ,-570 ,-577 ,-596 ,-594 ,-610 ,-615 ,-618 ,-620 ,-620 ,-636 ,-632 ,-640 ,-632 ,-632 ,-620 ,-628 ,-634 ,-630 ,-632 ,-608 ,-619 ,-606 ,-604 ,-591 ,-589 ,-572 ,-566 ,-548 ,-527 ,-517 ,-488 ,-480 ,-434 ,-417 ,-384 ,-348 ,-328 ,-289 ,-265 ,-236 ,-215 ,-174 ,-140 ,-110 ,-74 ,-50 ,-24 ,-13 ,25 ,38 ,62 ,86 ,96 ,132 ,142 ,178 ,193 ,210 ,220 ,250 ,258 ,264 ,299 ,302 ,319 ,328 ,346 ,360 ,372 ,390 ,390 ,416 ,415 ,430 ,442 ,452 ,442 ,464 ,462 ,452 ,466 ,468 ,471 ,465 ,481 ,472 ,480 ,474 ,466 ,468 ,461 ,482 ,464 ,477 ,471 ,480 ,478 ,480 ,486 ,478 ,486 ,484 ,502 ,484 ,498 ,494 ,492 ,490 ,479 ,1064 ,1440 ,1000 ,347 ,551 ,1207 ,989 ,360 ,397 ,1007 ,1297 ,878 ,370 ,84 ,-316 ,-913 ,-1268 ,-1357 ,-1487 ,-1927 ,-2288 ,-2209 ,-2045 ,-2257 ,-2876 ,-3388 ,-3581 ,-3595 ,-3713 ,-3871 ,-3940 ,-3874 ,-3690 ,-3505 ,-3199 ,-2902 ,-2720 ,-2591 ,-2382 ,-2013 ,-1773 ,-1828 ,-2048 ,-2111 ,-2202 ,-2509 ,-2928 ,-3177 ,-3312 ,-3583 ,-3823 ,-3790 ,-3496 ,-3302 ,-3210 ,-3120 ,-2973 ,-2826 ,-2725 ,-2791 ,-2983 ,-2856 ,-2700 ,-2503 ,-2279 ,-2339 ,-2491 ,-2581 ,-2742 ,-2895 ,-2893 ,-3235 ,-3709 ,-4035 ,-4239 ,-4673 ,-5016 ,-4503 ,-2567 ,-276 ,239 ,37 ,1054 ,3213 ,4467 ,3235 ,1802 ,2498 ,3709 ,3498 ,2409 ,2336 ,3357 ,3814 ,2938 ,2080 ,2210 ,2117 ,1361 ,1307 ,2344 ,3573 ,4158 ,4067 ,4048 ,3781 ,3320 ,3199 ,3504 ,4231 ,4983 ,5237 ,5100 ,5252 ,5492 ,5269 ,4362 ,3482 ,3094 ,2865 ,2220 ,1178 ,302 ,-242 ,-507 ,-875 ,-1045 ,-907 ,-932 ,-1144 ,-1049 ,-634 ,-382 ,-347 ,-253 ,-53 ,-56 ,-333 ,-656 ,-830 ,-1110 ,-1731 ,-2299 ,-2454 ,-2373 ,-2530 ,-2924 ,-3256 ,-3473 ,-3458 ,-3306 ,-3154 ,-3149 ,-3182 ,-3112 ,-3048 ,-2888 ,-2548 ,-2027 ,-1586 ,-1158 ,-616 ,-16 ,332 ,573 ,860 ,996 ,897 ,709 ,742 ,856 ,884 ,819 ,712 ,603 ,475 ,532 ,616 ,737 ,1166 ,1833 ,2294 ,2611 ,3335 ,4351 ,4870 ,4813 ,5036 ,5650 ,6080 ,5656 ,4983 ,5266 ,5864 ,5381 ,4128 ,3665 ,3940 ,3488 ,2042 ,1305 ,1805 ,1933 ,1008 ,474 ,1078 ,1543 ,1115 ,625 ,1002 ,1455 ,1007 ,471 ,752 ,1240 ,1013 ,487 ,449 ,570 ,58 ,-847 ,-1413 ,-1790 ,-2326 ,-2963 ,-3385 ,-3520 ,-3566 ,-3624 ,-3656 ,-3638 ,-3554 ,-3380 ,-3256 ,-3098 ,-2795 ,-2337 ,-2005 ,-1947 ,-1808 ,-1659 ,-1754 ,-2163 ,-2438 ,-2500 ,-2591 ,-2769 ,-3297 ,-3616 ,-3126 ,-2953 ,-3700 ,-3856 ,-3100 ,-2870 ,-3505 ,-3497 ,-2622 ,-2291 ,-2700 ,-2709 ,-2074 ,-1770 ,-2124 ,-2465 ,-2247 ,-1699 ,-1824 ,-2560 ,-2709 ,-2107 ,-1844 ,-2684 ,-3735 ,-3623 ,-2999 ,-3664 ,-4930 ,-5360 ,-5032 ,-4931 ,-5400 ,-4835 ,-2313 ,144 ,709 ,712 ,2330 ,4780 ,5276 ,3559 ,2406 ,3117 ,3993 ,3158 ,1756 ,1789 ,2505 ,2292 ,1162 ,642 ,1216 ,1130 ,326 ,692 ,2126 ,3287 ,3603 ,3812 ,4499 ,4943 ,4628 ,4239 ,4441 ,4752 ,4745 ,4729 ,4901 ,5163 ,5286 ,4851 ,3951 ,3254 ,2582 ,1971 ,1269 ,411 ,-95 ,-266 ,-585 ,-1069 ,-1077 ,-887 ,-977 ,-1132 ,-650 ,313 ,730 ,497 ,535 ,965 ,904 ,320 ,-109 ,-208 ,-522 ,-1426 ,-2254 ,-2602 ,-2957 ,-3671 ,-4275 ,-4341 ,-4111 ,-3822 ,-3483 ,-3115 ,-2888 ,-2708 ,-2436 ,-2040 ,-1825 ,-1772 ,-1449 ,-916 ,-464 ,-171 ,143 ,330 ,312 ,126 ,26 ,98 ,78 ,34 ,50 ,193 ,228 ,173 ,222 ,265 ,134 ,152 ,553 ,1043 ,1455 ,1924 ,2862 ,3964 ,4617 ,4873 ,5369 ,6318 ,6829 ,6422 ,5753 ,5556 ,5647 ,5182 ,4035 ,3089 ,2802 ,2539 ,1909 ,1158 ,998 ,1196 ,1034 ,814 ,1152 ,1865 ,2105 ,1873 ,1903 ,2250 ,2270 ,1901 ,1450 ,1274 ,1118 ,570 ,95 ,-44 ,-268 ,-829 ,-1424 ,-1819 ,-2080 ,-2465 ,-2985 ,-3261 ,-3357 ,-3338 ,-3293 ,-3276 ,-3212 ,-3083 ,-2914 ,-2751 ,-2469 ,-2158 ,-1925 ,-1795 ,-1675 ,-1473 ,-1456 ,-1727 ,-2148 ,-2465 ,-2770 ,-3199 ,-3623 ,-3859 ,-3900 ,-3994 ,-4098 ,-4090 ,-3853 ,-3585 ,-3344 ,-3122 ,-2791 ,-2399 ,-2074 ,-1776 ,-1654 ,-1647 ,-1786 ,-1908 ,-1955 ,-2081 ,-2269 ,-2514 ,-2801 ,-2810 ,-2723 ,-2938 ,-3214 ,-3525 ,-3734 ,-3696 ,-4052 ,-4563 ,-4722 ,-4857 ,-5131 ,-5178 ,-3932 ,-1577 ,182 ,590 ,963 ,2831 ,5431 ,5609 ,3494 ,2448 ,3565 ,4620 ,3412 ,1403 ,1364 ,2417 ,1968 ,319 ,-200 ,673 ,807 ,-62 ,317 ,2153 ,3714 ,4066 ,4233 ,5282 ,6013 ,5581 ,5070 ,5307 ,5563 ,5191 ,4442 ,4385 ,4864 ,4755 ,3818 ,2682 ,2181 ,2281 ,2046 ,1176 ,502 ,416 ,522 ,198 ,-313 ,-326 ,-222 ,-517 ,-715 ,-147 ,684 ,771 ,363 ,496 ,934 ,756 ,144 ,-178 ,-80 ,-409 ,-1405 ,-2193 ,-2426 ,-2805 ,-3764 ,-4635 ,-4731 ,-4272 ,-3943 ,-3810 ,-3420 ,-2823 ,-2304 ,-2084 ,-1820 ,-1420 ,-1093 ,-893 ,-733 ,-402 ,11 ,144 ,-107 ,-387 ,-579 ,-599 ,-581 ,-651 ,-592 ,-382 ,-39 ,317 ,519 ,558 ,628 ,784 ,1029 ,1258 ,1455 ,1881 ,2403 ,2747 ,2932 ,3490 ,4369 ,4999 ,5019 ,4870 ,5195 ,5553 ,5261 ,4420 ,3835 ,3661 ,3352 ,2680 ,2005 ,1799 ,1690 ,1376 ,1113 ,1240 ,1561 ,1698 ,1750 ,2003 ,2451 ,2629 ,2490 ,2284 ,2094 ,1794 ,1265 ,734 ,335 ,-48 ,-550 ,-969 ,-1299 ,-1568 ,-1936 ,-2304 ,-2522 ,-2625 ,-2623 ,-2603 ,-2559 ,-2502 ,-2444};
	std::vector<double> mfcc = sampleToMFCC(input, fbank);

	for(unsigned x = 0; x < mfcc.size(); x++)
		std::cout<< mfcc[x] <<" ";
	std::cout<<std::endl;
	return 0;
}


//OpenCV benchmarking
//#include <iostream>
//#include <ece420_lib.h>
//#include <opencv2/ml/ml.hpp>
//#include <vector>

//int main(int argc, char** argv)
//{
//	cv::Mat dataMat(2, 2, CV_32F);
//	std::vector<float> data = {1.0, 1.0, 2.0, 2.0};

//	std::memcpy(dataMat.data, data.data(), 4 * sizeof(float));

//	cv::Mat tagsMat(1, 2, CV_32S);
//	std::vector<int> tags = {1, 2};
//	std::memcpy(tagsMat.data, tags.data(), 2 * sizeof(int));

//	cv::Ptr<cv::ml::KNearest> knn(cv::ml::KNearest::create());
//	knn->setDefaultK(1);
//	knn->setIsClassifier(1);

//	std::cout<<"dataMat =\n"<<dataMat<<"\n";
//	std::cout<<"tagsMat =\n"<<tagsMat<<"\n";

//	knn->train(dataMat, cv::ml::ROW_SAMPLE, tagsMat);

//	cv::Mat unknownMat1(1, 2, CV_32F);
//	float unknownData1[2] = {1.0, 1.0};
//	std::memcpy(unknownMat1.data, unknownData1, 2 * sizeof(float));

//	cv::Mat unknownMat3(1, 2, CV_32F);
//	float unknownData3[2] = {4.0, 3.0};
//	std::memcpy(unknownMat3.data, unknownData3, 2 * sizeof(float));

//	cv::Mat_<float> dist1(5, 5, CV_32F);
//	cv::Mat_<float> dist2(5, 5, CV_32F);

//	auto classified1 = knn->findNearest(unknownMat1, 1, cv::noArray(), cv::noArray(), dist1);
//	auto classified3 = knn->findNearest(unknownMat3, 1, cv::noArray(), cv::noArray(), dist2);

//	for(unsigned x = 0 ; x < 5; x++) {
//		for(unsigned y = 0; y < 5; y++) {
//			std::cout<< dist2[x][y]<< " ";
//		}
//		std::cout<< "\n";
//	}

//	std::cout<<"dist1\n"<<dist1<<"\n";
//	std::cout<<"dist2\n"<<dist2<<"\n";

//	std::cout<<"Classified (1.0, 1.0)= "<< classified1 << "\n";
//	std::cout<<"Classified (3.0, 3.0)= "<< classified3 << "\n";

//	data.push_back(3.0);
//	data.push_back(3.0);

//	tags.push_back(3);

//	for(unsigned x = 0; x < 3; x++){
//		std::cout<<tags[x]<<" ";
//	}
//	std::cout<<"\n";

//	cv::Mat appendedTrainMat(3, 2, CV_32F);
//	cv::Mat appendedTagMat(1, 3, CV_32S);

//	std::memcpy(appendedTrainMat.data, data.data(), 6 * sizeof(float));
//	std::memcpy(appendedTagMat.data, tags.data(), 3 * sizeof(int));

//	std::cout<<"appendedTrainMat =\n"<<appendedTrainMat<<"\n";
//	std::cout<<"appendedTagMat =\n"<<appendedTagMat<<"\n";

//	knn->train(appendedTrainMat, cv::ml::ROW_SAMPLE, appendedTagMat);

//	classified1 = knn->findNearest(unknownMat1, 1, cv::noArray());
//	classified3 = knn->findNearest(unknownMat3, 1, cv::noArray());

//	std::cout<<"Classified (1.0, 1.0)= "<< classified1 << "\n";
//	std::cout<<"Classified (3.0, 3.0)= "<< classified3 << "\n";



//	return 0;
//}
